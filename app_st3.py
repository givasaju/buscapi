# Buscapi v.1.0
# Aplica√ß√£o Streamlit que consome o fluxo de an√°lise com persist√™ncia de dados.

import streamlit as st
import pandas as pd
import os
import sys
from typing import Dict, Any
import json
from datetime import datetime
from database.persist_dados import BuscapiDB
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
import traceback

# Adiciona o diret√≥rio raiz do projeto ao path para garantir que as importa√ß√µes funcionem
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importa o servi√ßo de an√°lise que usa o fluxo com persist√™ncia
from flows.ip_flow import IPAnalysisService
from tasks.pdf_worker import enqueue_pdf_job, get_job_meta

from agents.ip_agents import IPAgents

# Refatora√ß√£o GPT5
def safe_json_loads(data, fallback):
    """Carrega JSON com seguran√ßa, aceita dict/list ou string JSON."""
    if isinstance(data, str):
        try:
            return json.loads(data)
        except Exception:
            return fallback
    return data if data else fallback

class StreamlitIPApp:
    """
    Aplica√ß√£o Streamlit (UI) que consome o fluxo de an√°lise com persist√™ncia de dados.
    """
    
    def __init__(self):
        """Inicializa a aplica√ß√£o Streamlit."""
        self.setup_page_config()
        self.initialize_services()
        self.initialize_session_state()
    
    def setup_page_config(self):
        """Configura as propriedades b√°sicas da p√°gina Streamlit."""
        st.set_page_config(
            page_title="An√°lise de Propriedade Intelectual",
            page_icon="üîç",
            layout="wide",
            initial_sidebar_state="expanded"
        )

    def inject_custom_css(self):
        """Injeta o CSS customizado para a aplica√ß√£o."""
        st.markdown("""
        <style>
            /* Bot√µes com largura total dentro das colunas */
            div.stButton > button {
                width: 100%;
                height: 100%;
            }
            /* Card para o hist√≥rico */
            .card {
                background-color: #e6f3ff; /* Azul suave */
                border: 1px solid #b8d8f5;
                border-radius: 7px;
                padding: 15px;
                margin-bottom: 10px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            }
            /* Divisor customizado */
            hr.styled-divider {
                border-top: 20px solid yellow;
                border-radius: 5px;
            }
        </style>
        """, unsafe_allow_html=True)

    def initialize_services(self):
        """Inicializa o servi√ßo de an√°lise e o gerador de PDF."""
        try:
            self.analysis_service = IPAnalysisService()
            # Importa o gerador de PDF de forma segura (evita falha de import quando depend√™ncias n√£o est√£o instaladas)
            try:
                from tools.pdf_generator import PDFGenerator
                self.pdf_generator = PDFGenerator()
            except Exception:
                self.pdf_generator = None
            # Gerenciador de agentes (inclui o agente coordenador com LLMTool)
            try:
                self.ip_agents = IPAgents()
            except Exception:
                # Se n√£o for poss√≠vel instanciar agentes, prossegue sem LLM
                self.ip_agents = None
        except Exception as e:
            st.error(f"Erro ao inicializar servi√ßos: {e}")
            st.code(traceback.format_exc())
            st.stop()
    
    def initialize_session_state(self):
        """Inicializa o estado da sess√£o."""
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = None
        if 'is_processing' not in st.session_state:
            st.session_state.is_processing = False
        if 'current_search' not in st.session_state:
            st.session_state.current_search = "Tecnologia de IA na Agricultura"
        if 'selected_query_id' not in st.session_state:
            st.session_state.selected_query_id = None
        if 'page' not in st.session_state:
            st.session_state.page = "An√°lise Principal"
        # Modelo LLM selecionado pelo usu√°rio (override por execu√ß√£o). Se 'Env default', usa LLM_MODEL do .env
        if 'selected_llm_model' not in st.session_state:
            env_model = os.getenv('LLM_MODEL') or 'Env default'
            st.session_state.selected_llm_model = env_model
    
    def render_header(self):
        """Renderiza o cabe√ßalho da aplica√ß√£o."""
        st.markdown('<h1 style="text-align: center;">üîç Sistema de An√°lise de Propriedade Intelectual</h1>', unsafe_allow_html=True)
        # Indicadores r√°pidos de disponibilidade de funcionalidades
        try:
            if not getattr(self, 'ip_agents', None):
                st.warning("LLM indispon√≠vel: Recursos de gera√ß√£o de insights via LLM ser√£o ocultos.")
            if not getattr(self, 'pdf_generator', None):
                st.info("Gerador de PDF indispon√≠vel: a exporta√ß√£o para PDF estar√° desabilitada at√© instalar depend√™ncias.")
        except Exception:
            pass

    def render_sidebar(self):
        """Renderiza a barra lateral com os controles."""
        st.sidebar.header("üîß Controles de Pesquisa")
        # Seletor de modelo LLM (override por execu√ß√£o). 'Env default' usa o LLM_MODEL do .env
        llm_options = [
            'Env default',
            'gpt-5-nano',
            'gpt-4o-mini',
            'gpt-4o',
            'gpt-4o-realtime-preview',
            'gpt-4',
            'gpt-3.5-turbo'
        ]
        # Insere o valor atual no topo se n√£o fizer parte das op√ß√µes
        current = st.session_state.get('selected_llm_model') or 'Env default'
        if current not in llm_options:
            llm_options.insert(0, current)
        chosen = st.sidebar.selectbox('Modelo LLM (override)', options=llm_options, index=llm_options.index(current))
        st.session_state.selected_llm_model = chosen

        with st.sidebar.form("search_form"):
            search_criteria = st.text_area("Crit√©rios de Busca:", value=st.session_state.current_search)
            submitted = st.form_submit_button("üöÄ Iniciar An√°lise")
            if submitted and search_criteria.strip():
                self.run_analysis(search_criteria.strip())

    def run_analysis(self, search_criteria: str):
        """Dispara a an√°lise usando o IPAnalysisService e atualiza a tela."""
        st.session_state.is_processing = True
        st.session_state.analysis_results = None
        
        with st.spinner("üîÑ Executando fluxo de an√°lise completo (com persist√™ncia no banco de dados)..."):
            try:
                # PASSO 1: REGISTRO - Cria a busca no DB e obt√©m o ID.
                # O m√©todo start_analysis retorna um ID inteiro ou levanta uma exce√ß√£o em caso de falha.
                flow_id = self.analysis_service.start_analysis(search_criteria)

                # PASSO 2: EXECU√á√ÉO - Executa o crewai-flow usando o ID.
                results = self.analysis_service.execute_analysis(flow_id)
                if "error" in results:
                    st.error(f"Falha ao executar a an√°lise: {results['error']}")
                    st.session_state.is_processing = False
                    return

                # PASSO 3: APRESENTA√á√ÉO (Tradu√ß√£o dos resultados)
                # O fluxo retorna os resultados das ferramentas como strings JSON.
                # Precisamos decodific√°-los para objetos Python antes de usar na UI.
                
                # 3.1. Decodificar 'analysis_results' de string para dicion√°rio         
                analysis_data = safe_json_loads(results.get('analysis_results'), {})
                classified_data = safe_json_loads(results.get('classified_data'), [])
                visualizations = safe_json_loads(results.get('visualizations'), {})

                
                # 3.3. Montar o dicion√°rio final para a UI
                category_summary = analysis_data.get('count_by_category', {})
                insights = results.get('insights', 'Nenhum insight gerado.')
                
                ui_results = {
                    'search_criteria': search_criteria,
                    'data_collected': results.get('data_collected', 0),
                    'data_classified': len(classified_data),
                    'category_summary': category_summary,
                    'total_categories': len(category_summary),
                    'insights': insights,
                    'formatted_insights': insights.replace('. ', '.\n\n'),
                    'visualizations': results.get('visualizations', {}),
                    'success': True,
                    'flow_id': flow_id,
                    # Adiciona os dados j√° decodificados para uso em outras partes (PDF, detalhes)
                    'analysis_results': analysis_data,
                    'classified_data': classified_data
                }
                st.session_state.analysis_results = ui_results

            except Exception as e:
                st.error(f"Ocorreu um erro grave durante a execu√ß√£o do fluxo: {e}")
                st.code(traceback.format_exc())

        st.session_state.is_processing = False
        st.rerun()

    def render_results(self):
        """Renderiza o corpo principal da p√°gina com os resultados."""
        results = st.session_state.analysis_results
        if not results:
            st.info("üëã Bem-vindo! Use a barra lateral para iniciar uma nova an√°lise.")
            return
        if not results.get('success', False):
            st.error(f"‚ùå Erro na an√°lise: {results.get('error', 'Erro desconhecido')}")
            return
        
        st.header("üìä Resultados da An√°lise")
        self.render_metrics(results)
        self.render_insights(results)
        self.render_visualizations(results)
        self.render_export_options(results)

    def render_metrics(self, results: Dict[str, Any]):
        st.subheader("üìà M√©tricas Principais")
        col1, col2, col3, col4 = st.columns(4)

        # Dados coletados podem vir como inteiro (contagem) ou lista de itens
        data_collected = results.get('data_collected', 0)
        if isinstance(data_collected, int):
            collected_count = data_collected
        else:
            try:
                collected_count = len(data_collected)
            except Exception:
                collected_count = 0

        # Classified data pode estar sob 'classified_data' (lista) ou 'data_classified' (contagem)
        classified = results.get('classified_data', results.get('data_classified', []))
        if isinstance(classified, int):
            classified_count = classified
        else:
            try:
                classified_count = len(classified)
            except Exception:
                classified_count = 0

        # Visualiza√ß√µes e an√°lises: contar chaves ou entradas
        viz = results.get('visualizations', {})
        try:
            viz_count = len(viz) if viz else 0
        except Exception:
            viz_count = 0

        analysis = results.get('analysis_results', {})
        try:
            analysis_count = len(analysis) if analysis else 0
        except Exception:
            analysis_count = 0

        col1.metric("Dados Coletados", collected_count)
        col2.metric("Classificados", classified_count)
        col3.metric("Visualiza√ß√µes", viz_count)
        col4.metric("An√°lises", analysis_count)
    
    def render_insights(self, results: Dict[str, Any]):
        st.subheader("üí° Insights e Conclus√µes")
        st.markdown(results.get('formatted_insights', 'Nenhum insight gerado.'))
        
        # Bot√£o para gera√ß√£o de insights via LLM (somente dispon√≠vel se o agente coordenador estiver dispon√≠vel)
        try:
            if hasattr(self, 'ip_agents') and self.ip_agents:
                if st.button("ü§ñ Gerar insights (LLM)"):
                    # Dados para enviar √† LLM
                    analysis = results.get('analysis_results', {}) or {}
                    classified = results.get('classified_data', []) or []
                    flow_id = results.get('flow_id')

                    with st.spinner("Gerando insights via LLM..."):
                        try:
                            # Recupera sele√ß√£o de modelo (se 'Env default', passa None para usar LLM_MODEL do .env)
                            sel_model = st.session_state.get('selected_llm_model')
                            model_param = None if not sel_model or sel_model == 'Env default' else sel_model
                            insights = self.ip_agents.generate_insights_via_llm(analysis=analysis, classified=classified, model=model_param)
                            if insights:
                                # Atualiza sess√£o e exibe
                                formatted = insights.replace('. ', '.\n\n')
                                st.success("Insights gerados com sucesso.")
                                st.markdown(formatted)
                                # Atualiza o estado para permitir exporta√ß√£o
                                st.session_state.analysis_results = st.session_state.analysis_results or {}
                                st.session_state.analysis_results['insights'] = insights
                                st.session_state.analysis_results['formatted_insights'] = formatted

                                # Persiste um log curto no banco de dados
                                try:
                                    if flow_id:
                                        db = BuscapiDB()
                                        db.insert_search_log(flow_id, f"LLM insights: {insights[:3000]}")
                                        db.close()
                                except Exception as e:
                                    st.warning(f"N√£o foi poss√≠vel persistir os insights no banco: {e}")
                            else:
                                st.info("Nenhum insight gerado ou LLM indispon√≠vel.")
                        except Exception as e:
                            st.error(f"Erro ao gerar insights via LLM: {e}")
        except Exception:
            # Seguran√ßa: n√£o impedir√° a renderiza√ß√£o caso algo falhe
            pass

    def render_visualizations(self, results: Dict[str, Any]):
        st.subheader("üìä Visualiza√ß√µes")
        # A chave 'visualizations' agora cont√©m um dicion√°rio com os JSONs dos gr√°ficos
        viz_data = results.get('visualizations', {})
        # <#> if viz_data:
        # <#>     for viz_name, viz_json in viz_data.items():
        # <#>         # Garante dict para uso
        # <#>         if isinstance(viz_json, str):
        # <#>             viz_data = json.loads(viz_json)
        # <#>         else:
        # <#>             viz_data = viz_json
        # <#> try:
        # <#>     fig = pio.from_json(viz_json if isinstance(viz_json, str) else json.dumps(viz_json))
        # <#>     st.plotly_chart(fig, use_container_width=True)
        # <#> except Exception as e:
        # <#>     st.error(f"Erro ao renderizar visualiza√ß√£o {viz_name}: {e}")
        if not viz_data:
            st.info("Nenhuma visualiza√ß√£o dispon√≠vel.")
            return

        for viz_name, viz_json in viz_data.items():
            try:
                fig = None

                # Caso: string JSON que representa uma figura Plotly
                if isinstance(viz_json, str):
                    try:
                        fig = pio.from_json(viz_json)
                    except Exception:
                        # tentar carregar como dict
                        parsed = json.loads(viz_json)
                        if isinstance(parsed, dict):
                            fig = go.Figure(parsed)
                        elif isinstance(parsed, list):
                            fig = go.Figure(data=parsed)

                # Caso: j√° √© um dict (pode ser figura completa ou dict de traces)
                elif isinstance(viz_json, dict):
                    try:
                        fig = go.Figure(viz_json)
                    except Exception:
                        # fallback: se dict cont√©m 'data'/'layout'
                        fig = go.Figure(data=viz_json.get('data', []), layout=viz_json.get('layout', {}))

                # Caso: lista de traces
                elif isinstance(viz_json, list):
                    fig = go.Figure(data=viz_json)

                # Se por algum motivo ainda n√£o temos figura, falha explicitamente
                if fig is None:
                    raise ValueError('Formato de visualiza√ß√£o desconhecido')

                st.plotly_chart(fig, use_container_width=True, key=f"viz_{viz_name}")
            except Exception as e:
                viz_label = viz_name if 'viz_name' in locals() else '<unknown>'
                st.error(f"Erro ao renderizar visualiza√ß√£o {viz_label}: {e}")

    def render_export_options(self, results: Dict[str, Any]):
        """Renderiza o bot√£o de exporta√ß√£o e chama o m√©todo de gera√ß√£o de PDF."""
        st.subheader("üìÑ Op√ß√µes de Exporta√ß√£o")
        # Ao inv√©s de bloquear a UI gerando o PDF na hora, enfileiramos um job e retornamos job_id
        if st.button("üìÑ Gerar Relat√≥rio PDF (background)", type="primary"):
            try:
                # Gera um arquivo tempor√°rio com imagens localmente antes de enfileirar
                # Reusa a l√≥gica de cria√ß√£o de imagens (mesma que estava em generate_pdf_and_download)
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                temp_image_dir = os.path.join("static", "temp_images")
                os.makedirs(temp_image_dir, exist_ok=True)

                image_paths = {}
                viz_data = results.get('visualizations', {}) or {}
                for viz_name, viz_json in viz_data.items():
                    try:
                        fig = None
                        if isinstance(viz_json, str):
                            try:
                                fig = pio.from_json(viz_json)
                            except Exception:
                                parsed = json.loads(viz_json)
                                if isinstance(parsed, dict):
                                    fig = go.Figure(parsed)
                                elif isinstance(parsed, list):
                                    fig = go.Figure(data=parsed)
                        elif isinstance(viz_json, dict):
                            try:
                                fig = go.Figure(viz_json)
                            except Exception:
                                fig = go.Figure(data=viz_json.get('data', []), layout=viz_json.get('layout', {}))
                        elif isinstance(viz_json, list):
                            fig = go.Figure(data=viz_json)

                        if fig is None:
                            continue

                        img_path = os.path.join(temp_image_dir, f"{viz_name}_{timestamp}.png")
                        try:
                            fig.write_image(img_path, scale=2)
                            image_paths[viz_name] = img_path
                        except Exception as e:
                            print(f"Erro ao gerar imagem para PDF '{viz_name}': {e}")
                    except Exception as e:
                        print(f"Erro ao processar visualiza√ß√£o '{viz_name}' para PDF: {e}")

                # Prepara o payload de results para o gerador de PDF
                results_for_pdf = results.copy()
                results_for_pdf['visualizations'] = image_paths

                job_meta = enqueue_pdf_job(results_for_pdf, search_query_id=results.get('flow_id'))
                st.success(f"PDF enfileirado. Job ID: {job_meta.get('job_id')}")
                st.info("Use a se√ß√£o 'Hist√≥rico / Detalhes' para checar o status e baixar quando pronto.")
            except Exception as e:
                st.error(f"Erro ao enfileirar PDF: {e}")

        # Pequena UI para checar um job_id diretamente
        with st.expander("üîé Checar status do job PDF"):
            jid = st.text_input("Job ID:", value="", key='check_pdf_job_id')
            if st.button("Checar status", key='check_pdf_job_btn'):
                if not jid:
                    st.warning("Informe um Job ID v√°lido.")
                else:
                    meta = get_job_meta(jid)
                    st.json(meta)
                    if meta.get('status') == 'completed' and meta.get('output_path'):
                        try:
                            with open(meta.get('output_path'), 'rb') as f:
                                st.download_button(label='Baixar PDF gerado', data=f.read(), file_name=os.path.basename(meta.get('output_path')))
                        except Exception as e:
                            st.error(f"Falha ao abrir arquivo para download: {e}")

    def generate_pdf_and_download(self, results: Dict[str, Any]):
        """Gera o PDF e fornece o bot√£o de download."""
        try:
            with st.spinner("üìÑ Gerando relat√≥rio PDF..."):
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                pdf_filename = f"relatorio_buscapi_{timestamp}.pdf"
                pdf_output_path = os.path.join("static", pdf_filename)
                
                # --- L√≥gica para recriar imagens para o PDF ---
                image_paths = {}
                viz_data = results.get('visualizations', {})
                temp_image_dir = os.path.join("static", "temp_images")
                os.makedirs(temp_image_dir, exist_ok=True)

                for viz_name, viz_json in viz_data.items():
                    try:
                        # Reusar a mesma l√≥gica de renderiza√ß√£o para criar a figura
                        fig = None
                        if isinstance(viz_json, str):
                            try:
                                fig = pio.from_json(viz_json)
                            except Exception:
                                parsed = json.loads(viz_json)
                                if isinstance(parsed, dict):
                                    fig = go.Figure(parsed)
                                elif isinstance(parsed, list):
                                    fig = go.Figure(data=parsed)
                        elif isinstance(viz_json, dict):
                            try:
                                fig = go.Figure(viz_json)
                            except Exception:
                                fig = go.Figure(data=viz_json.get('data', []), layout=viz_json.get('layout', {}))
                        elif isinstance(viz_json, list):
                            fig = go.Figure(data=viz_json)

                        if fig is None:
                            st.warning(f"Visualiza√ß√£o {viz_name} n√£o p√¥de ser convertida para Plotly.")
                            continue

                        # Exibe no Streamlit como pr√©-visualiza√ß√£o no processo de gera√ß√£o do PDF
                        st.plotly_chart(fig, use_container_width=True, key=f"pdf_viz_{viz_name}_{timestamp}")

                        try:
                            img_path = os.path.join(temp_image_dir, f"{viz_name}_{timestamp}.png")
                            fig.write_image(img_path, scale=2)
                            image_paths[viz_name] = img_path
                        except Exception as e:
                            print(f"Erro ao gerar imagem para PDF '{viz_name}': {e}")
                            # n√£o interrompe o loop: continua com pr√≥ximas visualiza√ß√µes
                    except Exception as e:
                        print(f"Erro ao processar visualiza√ß√£o '{viz_name}' para PDF: {e}")
                
                # Atualiza o dicion√°rio de resultados com os caminhos das imagens para o gerador de PDF
                results_for_pdf = results.copy()
                results_for_pdf['visualizations'] = image_paths
                self.pdf_generator.generate_report(results_for_pdf, pdf_output_path)
            
            with open(pdf_output_path, "rb") as pdf_file:
                st.download_button(
                    label="Clique para baixar o PDF",
                    data=pdf_file.read(),
                    file_name=os.path.basename(pdf_output_path),
                    mime="application/pdf"
                )
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar relat√≥rio PDF: {e}")

    def render_history_sidebar(self):
        """Renderiza controles espec√≠ficos para a p√°gina de hist√≥rico."""
        st.sidebar.header("üìã Controles do Hist√≥rico")
        
        with st.sidebar.expander("üîç Filtros", expanded=True):
            st.date_input("Filtrar por data:", key='date_filter', help="Deixe em branco para ver todos os registros")
            st.selectbox("Filtrar por status:", options=["Todos", "Conclu√≠do", "Em andamento", "Erro"], key='status_filter')
        
        st.sidebar.markdown("### ‚ö° A√ß√µes R√°pidas")
        if st.sidebar.button("üîÑ Atualizar Lista", help="Recarrega os dados do hist√≥rico"):
            st.rerun()
        
        if st.sidebar.button("üóëÔ∏è Limpar Sele√ß√£o", help="Remove a sele√ß√£o atual"):
            if 'selected_query_id' in st.session_state:
                del st.session_state.selected_query_id
            if 'history_selector' in st.session_state:
                del st.session_state.history_selector
            st.rerun()
        
        try:
            db = BuscapiDB()
            all_queries = db.get_all_search_queries()
            total_searches = len(all_queries) if all_queries else 0
            try:
                recent_searches = db.count_recent_searches(days=7) if hasattr(db, 'count_recent_searches') else 0
            except:
                recent_searches = 0
            db.close()
            
            st.sidebar.markdown("### üìä Estat√≠sticas")
            st.sidebar.metric("Total de Buscas", total_searches)
            st.sidebar.metric("√öltimos 7 dias", recent_searches)
            
        except Exception as e:
            st.sidebar.error(f"Erro ao carregar estat√≠sticas: {e}")
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("**üí° Dicas:**")
        st.sidebar.markdown("‚Ä¢ Clique em uma busca para ver detalhes")
        st.sidebar.markdown("‚Ä¢ Use 'Executar Novamente' para repetir uma an√°lise")
        st.sidebar.markdown("‚Ä¢ Os resultados s√£o salvos automaticamente")

    def render_history_page(self):
        """Renderiza a p√°gina com o hist√≥rico de buscas em formato de cards."""
        st.header("üìú Hist√≥rico de Buscas Registradas")
        st.info(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

        try:
            db = BuscapiDB()
            history_data = db.get_all_search_queries()
            db.close()
            
            if not history_data:
                st.info("Nenhum registro de busca encontrado.")
                return

            df = pd.DataFrame(history_data)

            if 'date_filter' in st.session_state and st.session_state.date_filter is not None:
                df['created_at_date'] = pd.to_datetime(df['created_at']).dt.date
                if st.session_state.date_filter:
                    df = df[df['created_at_date'] == st.session_state.date_filter]

            if 'status_filter' in st.session_state and st.session_state.status_filter != "Todos":
                df = df[df['status'] == st.session_state.status_filter]
            
            if df.empty:
                st.warning("Nenhum registro encontrado com os filtros aplicados.")
                return

            for index, row in df.iloc[::-1].iterrows():
                with st.container():
                    st.markdown('<div class="card" >' , unsafe_allow_html=True)
                    
                    main_col, btn_col = st.columns([3, 1])
                    
                    with main_col:
                        st.markdown(f"**Crit√©rio:** `{row['criteria']}`")
                        st.caption(f"ID: {row['id']} | Data: {pd.to_datetime(row['created_at']).strftime('%d/%m/%Y %H:%M')} | Status: {row['status']}")
                    
                    with btn_col:
                        btn1, btn2 = st.columns(2)
                        with btn1:
                            if st.button("üëÅÔ∏è", key=f"details_{row['id']}", help="Ver Detalhes"):
                                st.session_state.selected_query_id = row['id']
                                st.rerun()
                        with btn2:
                            if st.button("üîÑ", key=f"rerun_{row['id']}", help="Executar Novamente"):
                                st.session_state.current_search = row['criteria']
                                st.session_state.page = "An√°lise Principal"
                                st.rerun()
                    
                    st.markdown('</div>', unsafe_allow_html=True)

        except Exception as e:
            st.error(f"‚ùå Erro ao buscar hist√≥rico: {e}")
            st.code(traceback.format_exc())

    def render_details_page(self):
        """Renderiza a p√°gina de detalhes para uma busca espec√≠fica."""
        query_id = st.session_state.selected_query_id
        
        if not query_id:
            st.warning("Selecione uma busca no Hist√≥rico para ver os detalhes.")
            if st.button("‚¨ÖÔ∏è Voltar para o Hist√≥rico"):
                st.session_state.selected_query_id = None
                st.rerun()
            return

        st.header(f"üìÑ Detalhes da Busca ID: {query_id}")
        if st.button("‚¨ÖÔ∏è Voltar para o Hist√≥rico"):
            st.session_state.selected_query_id = None
            st.rerun()
            return

        try:
            db = BuscapiDB()
            query_info = db.get_search_query_by_id(query_id)
            # NOTA: Este m√©todo agora deve buscar os dados da tabela 'search_result_structured'
            # e retornar a coluna 'structured_json' como uma lista de dicion√°rios.
            structured_results = db.get_structured_results_by_query_id(query_id)
            db.close()

            if query_info:
                st.info(f"**Crit√©rio de Busca:** {query_info.get('criteria', 'N/A')}")

            if not structured_results:
                st.info("Nenhum resultado estruturado encontrado para esta busca.")
                return

            # Os dados j√° v√™m processados do banco. N√£o √© necess√°rio reprocessar.
            all_results = structured_results
            if not all_results:
                st.warning("Nenhum item de resultado p√¥de ser extra√≠do dos dados brutos.")
                return

            st.write(f"**Resultados encontrados e classificados:** {len(all_results)}")

            results_by_category = {}
            for result in all_results:
                category = result.get('category', 'Sem Categoria')
                if category not in results_by_category:
                    results_by_category[category] = []
                results_by_category[category].append(result)

            for category, results in results_by_category.items():
                with st.expander(f"üìÇ {category} ({len(results)} resultados)", expanded=True):
                    for i, result in enumerate(results):
                        with st.container():
                            title = result.get('title', 'T√≠tulo n√£o dispon√≠vel')
                            applicant = result.get('applicantName', 'N√£o informado')
                            summary = result.get('snippet') or result.get('abstract', 'N√£o dispon√≠vel')
                            app_number = result.get('applicationNumber')
                            pub_number = result.get('publicationNumber')
                            source = result.get('source', 'Desconhecida')
                            url = result.get('link') or result.get('url')
                            ipc_code = result.get('ipcCode')
                            filing_date = result.get('filingDate')
                            pub_date = result.get('publicationDate') or result.get('date')

                            def format_date(date_val):
                                if not date_val: return 'N/A'
                                try:
                                    return pd.to_datetime(date_val).strftime('%d/%m/%Y')
                                except (ValueError, TypeError):
                                    return str(date_val)

                            # Exibe as novas entidades extra√≠das
                            organizations = result.get('extracted_organizations', [])
                            persons = result.get('extracted_persons', [])

                            if organizations:
                                st.markdown(f"**üè¢ Organiza√ß√µes Identificadas:** ` {', '.join(organizations)} `")
                            if persons:
                                st.markdown(f"**üë§ Pessoas/Inventores Identificados:** ` {', '.join(persons)} `")

                            st.markdown(f"**{i+1}. {title}**")
                            st.markdown(f"**Fonte:** {source}")

                            col1, col2 = st.columns(2)
                            with col1:
                                st.markdown(f"**Requerente:** {applicant}")
                                if app_number: st.markdown(f"**N¬∫ do Pedido:** {app_number}")
                                if pub_number: st.markdown(f"**N¬∫ do Documento:** {pub_number}")
                            with col2:
                                st.markdown(f"**Data de Publica√ß√£o:** {format_date(pub_date)}")
                                if filing_date: st.markdown(f"**Data do Pedido:** {format_date(filing_date)}")
                                if ipc_code: st.markdown(f"**C√≥digo IPC:** {ipc_code}")
                            
                            if summary:
                                st.markdown("**Resumo:**")
                                st.markdown(f"> {summary}")
                            
                            if url:
                                st.markdown(f"üîó [Ver documento original]({url})")
                            
                            st.divider()

            # --- Se√ß√£o: Relat√≥rios PDF gerados para esta busca ---
            try:
                st.subheader("üìé Relat√≥rios PDF gerados")
                pdf_jobs_dir = os.path.join("static", "pdf_jobs")
                found = []
                if os.path.isdir(pdf_jobs_dir):
                    for fname in sorted(os.listdir(pdf_jobs_dir), reverse=True):
                        if not fname.lower().endswith('.json'):
                            continue
                        fpath = os.path.join(pdf_jobs_dir, fname)
                        try:
                            with open(fpath, 'r', encoding='utf-8') as f:
                                meta = json.load(f)
                            if meta.get('search_query_id') == query_id:
                                found.append(meta)
                        except Exception:
                            continue

                if not found:
                    st.info("Nenhum relat√≥rio PDF encontrado para esta busca.")
                else:
                    for meta in found:
                        st.markdown(f"**Job ID:** `{meta.get('job_id')}` ‚Äî Status: **{meta.get('status')}**")
                        op = meta.get('output_path')
                        if meta.get('status') == 'completed' and op and os.path.exists(op):
                            try:
                                with open(op, 'rb') as f:
                                    st.download_button(label=f"Baixar {os.path.basename(op)}", data=f.read(), file_name=os.path.basename(op))
                            except Exception as e:
                                st.error(f"Falha ao abrir PDF para download: {e}")
                        else:
                            if op:
                                st.write(f"Caminho do arquivo: {op}")
                            st.write("Aguardando gera√ß√£o ou falha registrada.")
            except Exception as e:
                st.error(f"Erro ao recuperar relat√≥rios PDF: {e}")

        except Exception as e:
            st.error(f"‚ùå Erro ao buscar detalhes da busca: {e}")
            st.code(traceback.format_exc())

    def run(self):
        """Executa a renderiza√ß√£o da UI."""
        self.inject_custom_css()
        self.render_header()
        
        st.sidebar.markdown("---")
        page_options = ("An√°lise Principal", "Hist√≥rico de Buscas")
        if 'page' not in st.session_state or st.session_state.page not in page_options:
            st.session_state.page = "An√°lise Principal"            
        page = st.sidebar.radio("üß≠ Navega√ß√£o", page_options, index=page_options.index(st.session_state.page))
        st.session_state.page = page        
        if page == "An√°lise Principal":
            self.render_sidebar()
            self.render_results()
        elif page == "Hist√≥rico de Buscas":
            if st.session_state.get('selected_query_id'):
                self.render_details_page()
            else:
                self.render_history_sidebar()
                self.render_history_page()

def main():
    """Fun√ß√£o principal."""
    app = StreamlitIPApp()
    app.run()

if __name__ == "__main__":
    main()
